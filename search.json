{"Functions.html#/c:@F@MMMIsSystemVersionGreaterOrEqual":{"name":"MMMIsSystemVersionGreaterOrEqual","abstract":"<p>YES, if the current iOS version is greater or equal to the provided version string.</p>"},"Functions.html#/c:@F@MMMPathRelativeToAppBundle":{"name":"MMMPathRelativeToAppBundle","abstract":"<p>For a path in one of the known subfolders of the app&rsquo;s sandbox (such as Library or Caches) returns a relative path prefixed"},"Functions.html#/c:@F@_MMMStringForEnumerationValue":{"name":"_MMMStringForEnumerationValue","abstract":"<p>Undocumented</p>"},"Functions.html#/c:@F@MMMCurlStringFromRequest":{"name":"MMMCurlStringFromRequest","abstract":"<p>Roughly a curl-equivalent string for the given request."},"Functions.html#/c:@F@MMMStringForLoggingFromData":{"name":"MMMStringForLoggingFromData","abstract":"<p>A string version of the given NSData object suitable for logging. Typically used with network responses, when we get"},"Functions.html#/c:@F@MMMQueryStringFromParameters":{"name":"MMMQueryStringFromParameters","abstract":"<p>Properly escaped URL query string from a dictionary of key-value pairs."},"Functions.html#/c:@F@MMMQueryStringFromParametersEscape":{"name":"MMMQueryStringFromParametersEscape","abstract":"<p>The function that is used by MMMQueryStringFromParameters() to escape parameter names or values.</p>"},"Functions.html#/c:@F@MMMSeemsLikeEmail":{"name":"MMMSeemsLikeEmail","abstract":"<p>YES, if the given string might be an email address.</p>"},"Type%20Definitions.html#/c:MMMNetworkConditioner.h@T@MMMNetworkConditionerBlock":{"name":"MMMNetworkConditionerBlock","abstract":"<p>Undocumented</p>"},"Protocols/MMMNetworkCondition.html#/c:objc(pl)MMMNetworkCondition(im)delayForEstimatedResponseLength:context:":{"name":"-delayForEstimatedResponseLength:context:","abstract":"<p>Undocumented</p>","parent_name":"MMMNetworkCondition"},"Protocols/MMMNetworkCondition.html#/c:objc(pl)MMMNetworkCondition(im)shouldFailInContext:":{"name":"-shouldFailInContext:","abstract":"<p>Undocumented</p>","parent_name":"MMMNetworkCondition"},"Protocols/MMMNetworkCondition.html":{"name":"MMMNetworkCondition","abstract":"<p>Protocol for the actual delay/error model.</p>"},"Classes/MMMSimpleNetworkCondition.html#/c:objc(cs)MMMSimpleNetworkCondition(im)initWithMinDelay:maxDelay:failureRate:":{"name":"-initWithMinDelay:maxDelay:failureRate:","abstract":"<p>Undocumented</p>","parent_name":"MMMSimpleNetworkCondition"},"Classes/MMMSimpleNetworkCondition.html#/c:objc(cs)MMMSimpleNetworkCondition(im)init":{"name":"-init","abstract":"<p>Undocumented</p>","parent_name":"MMMSimpleNetworkCondition"},"Classes/MMMNetworkConditioner.html#/c:objc(cs)MMMNetworkConditioner(cm)shared":{"name":"+shared","abstract":"<p>Undocumented</p>","parent_name":"MMMNetworkConditioner"},"Classes/MMMNetworkConditioner.html#/c:objc(cs)MMMNetworkConditioner(im)initWithCondition:":{"name":"-initWithCondition:","abstract":"<p>If condition is nil, then simulation will be disabled.</p>","parent_name":"MMMNetworkConditioner"},"Classes/MMMNetworkConditioner.html#/c:objc(cs)MMMNetworkConditioner(im)init":{"name":"-init","abstract":"<p>Undocumented</p>","parent_name":"MMMNetworkConditioner"},"Classes/MMMNetworkConditioner.html#/c:objc(cs)MMMNetworkConditioner(im)conditionBlock:inContext:estimatedResponseLength:":{"name":"-conditionBlock:inContext:estimatedResponseLength:","abstract":"<p>If simulation of errors and delays is turned on for this app, then the block will be called on the main queue","parent_name":"MMMNetworkConditioner"},"Classes/MMMWeakProxy.html#/c:objc(cs)MMMWeakProxy(cm)proxyWithTarget:":{"name":"+proxyWithTarget:","abstract":"<p>Undocumented</p>","parent_name":"MMMWeakProxy"},"Classes/MMMWeakProxy.html#/c:objc(cs)MMMWeakProxy(im)initWithTarget:":{"name":"-initWithTarget:","abstract":"<p>Undocumented</p>","parent_name":"MMMWeakProxy"},"Classes/MMMWeakProxy.html#/c:objc(cs)MMMWeakProxy(im)init":{"name":"-init","abstract":"<p>Undocumented</p>","parent_name":"MMMWeakProxy"},"Classes/MMMWeakProxy.html":{"name":"MMMWeakProxy","abstract":"<p>This is to be able to cut strong references, such as the ones NSTimer creates to its targets."},"Classes/MMMNetworkConditioner.html":{"name":"MMMNetworkConditioner","abstract":"<p>This is to help with network-related simulated delays and failures.</p>"},"Classes/MMMSimpleNetworkCondition.html":{"name":"MMMSimpleNetworkCondition","abstract":"<p>A network condition model with the given faulure rate and delays uniformely distributed within the given range.</p>"},"Categories/NSData%28MMMTemple%29.html#/c:objc(cs)NSData(cm)mmm_dataWithHexEncodedString:":{"name":"+mmm_dataWithHexEncodedString:","abstract":"<p>NSData object with a hex-encoded string. E.e. @&ldquo;001213&rdquo; will give NSData consisting of 3 bytes 0x00, 0x12, and 0x13.","parent_name":"NSData(MMMTemple)"},"Categories/NSMutableArray%28MMMTemple%29.html#/c:objc(cs)NSMutableArray(im)mmm_removeObjectsMatching:":{"name":"-mmm_removeObjectsMatching:","abstract":"<p>Removes objects matching the given predicate block.</p>","parent_name":"NSMutableArray(MMMTemple)"},"Categories/NSArray%28MMMTemple%29.html#/c:objc(cs)NSArray(im)mmm_arrayOfSlicesWithMaxLength:":{"name":"-mmm_arrayOfSlicesWithMaxLength:","abstract":"<p>The original array cut into subarrays with each slice except perhaps the last one consisting of maxLength elements.</p>","parent_name":"NSArray(MMMTemple)"},"Categories/NSArray%28MMMTemple%29.html#/c:objc(cs)NSArray(im)mmm_forEachPair:":{"name":"-mmm_forEachPair:","abstract":"<p>Performs the given block for each pair of the elements of the array from left to right,</p>","parent_name":"NSArray(MMMTemple)"},"Categories/NSArray%28MMMTemple%29.html#/c:objc(cs)NSArray(im)mmm_forEach:":{"name":"-mmm_forEach:","abstract":"<p>Performs the given block for every element of the array.</p>","parent_name":"NSArray(MMMTemple)"},"Categories/NSArray%28MMMTemple%29.html#/c:objc(cs)NSArray(im)mmm_objectsMatching:":{"name":"-mmm_objectsMatching:","abstract":"<p>Returns objects matching the given predicate block.</p>","parent_name":"NSArray(MMMTemple)"},"Categories/NSArray%28MMMTemple%29.html#/c:objc(cs)NSArray(im)mmm_firstObjectMatching:":{"name":"-mmm_firstObjectMatching:","abstract":"<p>Returns the first object for which the given predicate block returns YES; nil otherwise.</p>","parent_name":"NSArray(MMMTemple)"},"Categories/NSDate%28MMMTemple%29.html#/c:objc(cs)NSDate(cm)mmm_dateWithInternetTimeString:":{"name":"+mmm_dateWithInternetTimeString:","abstract":"<p>NSDate from internet timestamps, ISO8601-like strings like &ldquo;2016-10-22T10:23:28Z&rdquo;.","parent_name":"NSDate(MMMTemple)"},"Categories/NSString%28MMMTemple%29.html#/c:objc(cs)NSString(im)mmm_stringBySubstitutingVariables:":{"name":"-mmm_stringBySubstitutingVariables:","abstract":"<p>Returns a string with variables in the form ${variable_name} being replaced with values from the provided dictionary","parent_name":"NSString(MMMTemple)"},"Categories/NSError%28MMMTemple%29.html#/c:objc(cs)NSError(im)mmm_description":{"name":"-mmm_description","abstract":"<p>Description including underlying errors in a bit more readable form.","parent_name":"NSError(MMMTemple)"},"Categories/NSError%28MMMTemple%29.html#/c:objc(cs)NSError(im)mmm_underlyingError":{"name":"-mmm_underlyingError","abstract":"<p>A shortcut fetching the underlying error.</p>","parent_name":"NSError(MMMTemple)"},"Categories/NSError%28MMMTemple%29.html#/c:objc(cs)NSError(cm)mmm_errorWithDomain:code:message:underlyingError:":{"name":"+mmm_errorWithDomain:code:message:underlyingError:","abstract":"<p>A convenience initializer accepting an underlying error as a parameter (can be nil).</p>","parent_name":"NSError(MMMTemple)"},"Categories/NSError%28MMMTemple%29.html#/c:objc(cs)NSError(cm)mmm_errorWithDomain:message:underlyingError:":{"name":"+mmm_errorWithDomain:message:underlyingError:","abstract":"<p>An initializer with the code being optional (set to -1, so is not displayed by mmm_description).</p>","parent_name":"NSError(MMMTemple)"},"Categories/NSError%28MMMTemple%29.html#/c:objc(cs)NSError(cm)mmm_errorWithDomain:message:":{"name":"+mmm_errorWithDomain:message:","abstract":"<p>Another initializer hiding both the code (setting it to -1) and the underlyingError.</p>","parent_name":"NSError(MMMTemple)"},"Categories/NSObject%28MMMTemple%29.html#/c:objc(cs)NSObject(im)mmm_stripNSNull":{"name":"-mmm_stripNSNull","abstract":"<p>The receiver itself, or nil, if the receiver is [NSNull null].</p>","parent_name":"NSObject(MMMTemple)"},"Categories/NSMutableCharacterSet%28MMMTemple%29.html#/c:objc(cs)NSMutableCharacterSet(im)mmm_addCharactersFrom:to:":{"name":"-mmm_addCharactersFrom:to:","abstract":"<p>Convenience shortcut for <code>addCharactersInRange</code>. Adds a range of characters from first to last (including them both).</p>","parent_name":"NSMutableCharacterSet(MMMTemple)"},"Categories/NSScanner%28MMMTemple%29.html#/c:objc(cs)NSScanner(im)mmm_scanNextCharacter":{"name":"-mmm_scanNextCharacter","abstract":"<p>Grabs and returns the next character or 0 in case it&rsquo;s the scanner is at end.</p>","parent_name":"NSScanner(MMMTemple)"},"Categories/NSDictionary%28MMMTemple%29.html#/c:objc(cs)NSDictionary(im)mmm_extendedWithDictionary:":{"name":"-mmm_extendedWithDictionary:","abstract":"<p>A dictionary built from the receiver by adding values from another dictionary.","parent_name":"NSDictionary(MMMTemple)"},"Categories/NSDictionary%28MMMTemple%29.html":{"name":"NSDictionary(MMMTemple)","abstract":"<p>@}</p>"},"Categories/NSScanner%28MMMTemple%29.html":{"name":"NSScanner(MMMTemple)","abstract":"<p>Undocumented</p>"},"Categories/NSMutableCharacterSet%28MMMTemple%29.html":{"name":"NSMutableCharacterSet(MMMTemple)","abstract":"<p>Undocumented</p>"},"Categories/NSObject%28MMMTemple%29.html":{"name":"NSObject(MMMTemple)","abstract":"<p>Undocumented</p>"},"Categories/NSError%28MMMTemple%29.html":{"name":"NSError(MMMTemple)","abstract":"<p>Undocumented</p>"},"Categories/NSString%28MMMTemple%29.html":{"name":"NSString(MMMTemple)","abstract":"<p>Undocumented</p>"},"Categories/NSDate%28MMMTemple%29.html":{"name":"NSDate(MMMTemple)","abstract":"<p>Undocumented</p>"},"Categories/NSArray%28MMMTemple%29.html":{"name":"NSArray(MMMTemple)","abstract":"<p>Undocumented</p>"},"Categories/NSMutableArray%28MMMTemple%29.html":{"name":"NSMutableArray(MMMTemple)","abstract":"<p>Undocumented</p>"},"Categories/NSData%28MMMTemple%29.html":{"name":"NSData(MMMTemple)","abstract":"<p>Undocumented</p>"},"Categories.html":{"name":"Categories","abstract":"<p>The following categories are available globally.</p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"},"Type%20Definitions.html":{"name":"Type Definitions","abstract":"<p>The following type definitions are available globally.</p>"},"Functions.html":{"name":"Functions","abstract":"<p>The following functions are available globally.</p>"}}