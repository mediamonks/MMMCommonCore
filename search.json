{"Structs/ArrayBuilder.html#/buildBlock()":{"name":"buildBlock()","parent_name":"ArrayBuilder"},"Structs/ArrayBuilder.html#/buildBlock(_:)":{"name":"buildBlock(_:)","parent_name":"ArrayBuilder"},"Structs/ArrayBuilder.html#/buildArray(_:)":{"name":"buildArray(_:)","parent_name":"ArrayBuilder"},"Structs/ArrayBuilder.html#/buildOptional(_:)":{"name":"buildOptional(_:)","parent_name":"ArrayBuilder"},"Structs/ArrayBuilder.html#/buildEither(first:)":{"name":"buildEither(first:)","parent_name":"ArrayBuilder"},"Structs/ArrayBuilder.html#/buildEither(second:)":{"name":"buildEither(second:)","parent_name":"ArrayBuilder"},"Structs/ArrayBuilder.html#/buildBlock(_:_:)":{"name":"buildBlock(_:_:)","parent_name":"ArrayBuilder"},"Structs/ArrayBuilder.html#/buildBlock(_:_:_:)":{"name":"buildBlock(_:_:_:)","parent_name":"ArrayBuilder"},"Structs/ArrayBuilder.html#/buildBlock(_:_:_:_:)":{"name":"buildBlock(_:_:_:_:)","parent_name":"ArrayBuilder"},"Structs/ArrayBuilder.html#/buildBlock(_:_:_:_:_:)":{"name":"buildBlock(_:_:_:_:_:)","parent_name":"ArrayBuilder"},"Structs/ArrayBuilder.html#/buildBlock(_:_:_:_:_:_:)":{"name":"buildBlock(_:_:_:_:_:_:)","parent_name":"ArrayBuilder"},"Structs/SemVer.html#/zero":{"name":"zero","parent_name":"SemVer"},"Structs/SemVer.html#/major":{"name":"major","parent_name":"SemVer"},"Structs/SemVer.html#/minor":{"name":"minor","parent_name":"SemVer"},"Structs/SemVer.html#/patch":{"name":"patch","parent_name":"SemVer"},"Structs/SemVer.html#/init(from:)":{"name":"init(from:)","parent_name":"SemVer"},"Structs/SemVer.html#/init(major:minor:patch:)":{"name":"init(major:minor:patch:)","parent_name":"SemVer"},"Structs/SemVer.html#/init(version:)":{"name":"init(version:)","abstract":"<p>Initialise by parsing a string version. This strips any non-numerical characters; <code>0.9-dev.5</code> becomes <code>0.9.5</code>.</p>","parent_name":"SemVer"},"Structs/SemVer.html#/version":{"name":"version","parent_name":"SemVer"},"Structs/SemVer.html#/<(_:_:)":{"name":"<(_:_:)","parent_name":"SemVer"},"Structs/SemVer.html#/debugDescription":{"name":"debugDescription","parent_name":"SemVer"},"Structs/SemVer.html":{"name":"SemVer","abstract":"<p>Simple Semantic Versioning struct so you can easily compare 2 semantic versions.</p>"},"Structs/ArrayBuilder.html":{"name":"ArrayBuilder","abstract":"<p>A resultBuilder to help with constructing arrays. This can be useful when you want to create an array, in order, that"},"Extensions/MMMNetworkConditioner.html#/conditionBlock(context:estimatedResponseLength:block:)":{"name":"conditionBlock(context:estimatedResponseLength:block:)","parent_name":"MMMNetworkConditioner"},"Extensions/Sequence.html#/unique(by:)":{"name":"unique(by:)","abstract":"<p>Elements of this sequence in the same order but with elements having the same identifier","parent_name":"Sequence"},"Extensions/Scanner.html#/mmm_scanNextCharacter()":{"name":"mmm_scanNextCharacter()","abstract":"<p>Scans a single character unless at the end (or a null-terminator).</p>","parent_name":"Scanner"},"Extensions/Scanner.html#/mmm_scanString(_:)":{"name":"mmm_scanString(_:)","abstract":"<p>Scans the given strings if it follows next.</p>","parent_name":"Scanner"},"Extensions/String.html#/mmm_stringBySubstitutingVariables(_:)":{"name":"mmm_stringBySubstitutingVariables(_:)","abstract":"<p>Swift (<code>String</code>) version for replacing <code>${variable_name}</code> with a value from a providing dictionary.</p>","parent_name":"String"},"Extensions/NSError.html#/init(domain:message:code:underlyingError:)":{"name":"init(domain:message:code:underlyingError:)","abstract":"<p>Initialize using the given value&rsquo;s type name as a domain string.</p>","parent_name":"NSError"},"Extensions/Optional.html#/mmm_description":{"name":"mmm_description","abstract":"<p>To describe errors wrapped into optionals as well.</p>","parent_name":"Optional"},"Extensions/Optional.html#/unwrapped(_:)":{"name":"unwrapped(_:)","abstract":"<p>Execute the callback when the optional is non-nil.</p>","parent_name":"Optional"},"Extensions/Optional.html#/unwrap(orThrow:)":{"name":"unwrap(orThrow:)","abstract":"<p>Unwrap an optional value, or throw the provided error when <code>nil</code></p>","parent_name":"Optional"},"Extensions/Optional.html#/unwrap(withFallback:)":{"name":"unwrap(withFallback:)","abstract":"<p>Unwrap an optional value, or return the provided fallback value. Basically the same as using a the <code>??</code> operator","parent_name":"Optional"},"Extensions/Error.html#/mmm_description":{"name":"mmm_description","abstract":"<p>Better string representation for <code>Error</code> and <code>NSError</code>s.</p>","parent_name":"Error"},"Extensions/Array.html#/mmm_forEachPair(block:)":{"name":"mmm_forEachPair(block:)","abstract":"<p>Iterates through all neighbouring pairs of elements (a[i], a[i + 1]) in a regular order.</p>","parent_name":"Array"},"Extensions/Array.html#/firstMap(where:)":{"name":"firstMap(where:)","abstract":"<p>Find the first element that can map to a certain type, it&rsquo;s like doing a <code>.compactMap {}.first</code> without the","parent_name":"Array"},"Extensions/Array.html#/build(builder:)":{"name":"build(builder:)","abstract":"<p>Rebuild the array using the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/ArrayBuilder.html\">ArrayBuilder</a></code>.</p>","parent_name":"Array"},"Extensions/Array.html#/building(builder:)":{"name":"building(builder:)","abstract":"<p>Rebuild the array using the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/ArrayBuilder.html\">ArrayBuilder</a></code>, returning a new array.</p>","parent_name":"Array"},"Extensions/Array.html#/append(builder:)":{"name":"append(builder:)","abstract":"<p>Append contents to the array using the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/ArrayBuilder.html\">ArrayBuilder</a></code>.</p>","parent_name":"Array"},"Extensions/Array.html#/appending(builder:)":{"name":"appending(builder:)","abstract":"<p>Append contents to the array using the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/ArrayBuilder.html\">ArrayBuilder</a></code>, returning a new array.</p>","parent_name":"Array"},"Extensions/Array.html":{"name":"Array"},"Extensions/Error.html":{"name":"Error"},"Extensions/Optional.html":{"name":"Optional"},"Extensions/NSError.html":{"name":"NSError"},"Extensions/String.html":{"name":"String"},"Extensions/Scanner.html":{"name":"Scanner"},"Extensions/Sequence.html":{"name":"Sequence"},"Extensions/MMMNetworkConditioner.html":{"name":"MMMNetworkConditioner"},"Enums/LanguageMatchingMode.html#/exact":{"name":"exact","abstract":"<p>Only return an element where both the &ldquo;language&rdquo; and the &ldquo;region&rdquo; parts of the identifier match.</p>","parent_name":"LanguageMatchingMode"},"Enums/LanguageMatchingMode.html#/allowPartiallyMatching":{"name":"allowPartiallyMatching","abstract":"<p>If no exact match is available, then return an element where at least the &ldquo;language&rdquo; part matches,","parent_name":"LanguageMatchingMode"},"Enums/LanguageMatchingMode.html":{"name":"LanguageMatchingMode"},"Functions.html#/c:@F@MMMIsSystemVersionGreaterOrEqual":{"name":"MMMIsSystemVersionGreaterOrEqual","abstract":"<p>YES, if the current iOS version is greater or equal to the provided version string.</p>"},"Functions.html#/c:@F@MMMPathRelativeToAppBundle":{"name":"MMMPathRelativeToAppBundle","abstract":"<p>For a path in one of the known subfolders of the app&rsquo;s sandbox (such as Library or Caches) returns a relative path prefixed"},"Functions.html#/c:@F@_MMMStringForEnumerationValue":{"name":"_MMMStringForEnumerationValue","abstract":"<p>Undocumented</p>"},"Functions.html#/c:@F@MMMCurlStringFromRequest":{"name":"MMMCurlStringFromRequest","abstract":"<p>Roughly a curl-equivalent string for the given request."},"Functions.html#/c:@F@MMMStringForLoggingFromData":{"name":"MMMStringForLoggingFromData","abstract":"<p>A string version of the given NSData object suitable for logging. Typically used with network responses, when we get"},"Functions.html#/c:@F@MMMQueryStringFromParameters":{"name":"MMMQueryStringFromParameters","abstract":"<p>Properly escaped URL query string from a dictionary of key-value pairs."},"Functions.html#/c:@F@MMMQueryStringFromParametersEscape":{"name":"MMMQueryStringFromParametersEscape","abstract":"<p>The function that is used by MMMQueryStringFromParameters() to escape parameter names or values.</p>"},"Functions.html#/c:@F@MMMSeemsLikeEmail":{"name":"MMMSeemsLikeEmail","abstract":"<p>YES, if the given string might be an email address.</p>"},"Functions.html#/MMMTypeName(_:)":{"name":"MMMTypeName(_:)","abstract":"<p>The name of the value&rsquo;s type suitable for logs or NSError domains: without the name of the module"},"Functions.html#/withParent(_:function:file:line:block:)":{"name":"withParent(_:function:file:line:block:)","abstract":"<p>Unwraps the given &ldquo;parent&rdquo; object and either executes the given closure with it or, if the parent is <code>nil</code>,"},"Functions.html#/MMMLocalizedString(_:vars:)":{"name":"MMMLocalizedString(_:vars:)","abstract":"<p><code>NSLocalizedString()</code> without <code>comment</code> and with an optional dictionary of <code>${VAR}</code> substitutions"},"Functions.html#/MMMElementMatchingPreferredLanguage(in:preferredLanguage:languageOfElement:mode:)":{"name":"MMMElementMatchingPreferredLanguage(in:preferredLanguage:languageOfElement:mode:)","abstract":"<p>Picks an element of a sequence that is matching the given preferred language identifier the best.</p>"},"Functions.html#/MMMBestMatchingLanguage(in:preferredLanguage:mode:)":{"name":"MMMBestMatchingLanguage(in:preferredLanguage:mode:)"},"Type%20Definitions.html#/c:MMMNetworkConditioner.h@T@MMMNetworkConditionerBlock":{"name":"MMMNetworkConditionerBlock","abstract":"<p>Undocumented</p>"},"Protocols/MMMTimeSource.html#/now":{"name":"now","abstract":"<p>Current time. It might be frozen, but should never go back.</p>","parent_name":"MMMTimeSource"},"Protocols/MMMTimeSource.html#/realTimeIntervalFrom(_:)":{"name":"realTimeIntervalFrom(_:)","abstract":"<p>Time interval of the source scaled to real time. Needed when a class under tests uses timers, etc.</p>","parent_name":"MMMTimeSource"},"Protocols/NSErrorFriendly.html#/_userInfo":{"name":"_userInfo","parent_name":"NSErrorFriendly"},"Protocols/NSErrorFriendly.html#/_code":{"name":"_code","parent_name":"NSErrorFriendly"},"Protocols/MMMNetworkCondition.html#/c:objc(pl)MMMNetworkCondition(im)delayForEstimatedResponseLength:context:":{"name":"-delayForEstimatedResponseLength:context:","abstract":"<p>Undocumented</p>","parent_name":"MMMNetworkCondition"},"Protocols/MMMNetworkCondition.html#/c:objc(pl)MMMNetworkCondition(im)shouldFailInContext:":{"name":"-shouldFailInContext:","abstract":"<p>Undocumented</p>","parent_name":"MMMNetworkCondition"},"Protocols/MMMNetworkCondition.html":{"name":"MMMNetworkCondition","abstract":"<p>Protocol for the actual delay/error model.</p>"},"Protocols/NSErrorFriendly.html":{"name":"NSErrorFriendly","abstract":"<p>Adding this to your Swift errors makes them better fit the ObjC world avoiding the dreaded"},"Protocols/MMMTimeSource.html":{"name":"MMMTimeSource","abstract":"<p>This to be able to test classes depending on real time.</p>"},"Classes/MMMDefaultTimeSource.html#/now":{"name":"now","parent_name":"MMMDefaultTimeSource"},"Classes/MMMDefaultTimeSource.html#/realTimeIntervalFrom(_:)":{"name":"realTimeIntervalFrom(_:)","parent_name":"MMMDefaultTimeSource"},"Classes/MMMDefaultTimeSource.html#/init()":{"name":"init()","parent_name":"MMMDefaultTimeSource"},"Classes/MMMMockTimeSource.html#/init(scale:)":{"name":"init(scale:)","parent_name":"MMMMockTimeSource"},"Classes/MMMMockTimeSource.html#/now":{"name":"now","abstract":"<p>Controlled from the unit test to override the meaning of now for the class under test.</p>","parent_name":"MMMMockTimeSource"},"Classes/MMMMockTimeSource.html#/realTimeIntervalFrom(_:)":{"name":"realTimeIntervalFrom(_:)","parent_name":"MMMMockTimeSource"},"Classes/MMMBestMatching.html#/language(in:preferredLanguage:mode:)":{"name":"language(in:preferredLanguage:mode:)","parent_name":"MMMBestMatching"},"Classes/MMMSimpleNetworkCondition.html#/c:objc(cs)MMMSimpleNetworkCondition(im)initWithMinDelay:maxDelay:failureRate:":{"name":"-initWithMinDelay:maxDelay:failureRate:","abstract":"<p>Undocumented</p>","parent_name":"MMMSimpleNetworkCondition"},"Classes/MMMSimpleNetworkCondition.html#/c:objc(cs)MMMSimpleNetworkCondition(im)init":{"name":"-init","abstract":"<p>Undocumented</p>","parent_name":"MMMSimpleNetworkCondition"},"Classes/MMMNetworkConditioner.html#/c:objc(cs)MMMNetworkConditioner(cm)shared":{"name":"+shared","abstract":"<p>Undocumented</p>","parent_name":"MMMNetworkConditioner"},"Classes/MMMNetworkConditioner.html#/c:objc(cs)MMMNetworkConditioner(im)initWithCondition:":{"name":"-initWithCondition:","abstract":"<p>If condition is nil, then simulation will be disabled.</p>","parent_name":"MMMNetworkConditioner"},"Classes/MMMNetworkConditioner.html#/c:objc(cs)MMMNetworkConditioner(im)init":{"name":"-init","abstract":"<p>Undocumented</p>","parent_name":"MMMNetworkConditioner"},"Classes/MMMNetworkConditioner.html#/c:objc(cs)MMMNetworkConditioner(im)conditionBlock:inContext:estimatedResponseLength:":{"name":"-conditionBlock:inContext:estimatedResponseLength:","abstract":"<p>If simulation of errors and delays is turned on for this app, then the block will be called on the main queue","parent_name":"MMMNetworkConditioner"},"Classes/MMMWeakProxy.html#/c:objc(cs)MMMWeakProxy(cm)proxyWithTarget:":{"name":"+proxyWithTarget:","abstract":"<p>Undocumented</p>","parent_name":"MMMWeakProxy"},"Classes/MMMWeakProxy.html#/c:objc(cs)MMMWeakProxy(im)initWithTarget:":{"name":"-initWithTarget:","abstract":"<p>Undocumented</p>","parent_name":"MMMWeakProxy"},"Classes/MMMWeakProxy.html#/c:objc(cs)MMMWeakProxy(im)init":{"name":"-init","abstract":"<p>Undocumented</p>","parent_name":"MMMWeakProxy"},"Classes/MMMWeakProxy.html":{"name":"MMMWeakProxy","abstract":"<p>This is to be able to cut strong references, such as the ones NSTimer creates to its targets."},"Classes/MMMNetworkConditioner.html":{"name":"MMMNetworkConditioner","abstract":"<p>This is to help with network-related simulated delays and failures.</p>"},"Classes/MMMSimpleNetworkCondition.html":{"name":"MMMSimpleNetworkCondition","abstract":"<p>A network condition model with the given faulure rate and delays uniformely distributed within the given range.</p>"},"Classes/MMMBestMatching.html":{"name":"MMMBestMatching","abstract":"<p>Objective-C bridge for MMMBestMatchingLanguage, since top-level functions are not supported."},"Classes/MMMMockTimeSource.html":{"name":"MMMMockTimeSource","abstract":"<p>Time source for unit tests, where the &ldquo;now&rdquo; can be set externally and the scale or real time can be changed.</p>"},"Classes/MMMDefaultTimeSource.html":{"name":"MMMDefaultTimeSource","abstract":"<p>A regular (real time) time source.</p>"},"Categories/NSData%28MMMTemple%29.html#/c:objc(cs)NSData(cm)mmm_dataWithHexEncodedString:":{"name":"+mmm_dataWithHexEncodedString:","abstract":"<p>NSData object with a hex-encoded string. E.e. @&ldquo;001213&rdquo; will give NSData consisting of 3 bytes 0x00, 0x12, and 0x13.","parent_name":"NSData(MMMTemple)"},"Categories/NSMutableArray%28MMMTemple%29.html#/c:objc(cs)NSMutableArray(im)mmm_removeObjectsMatching:":{"name":"-mmm_removeObjectsMatching:","abstract":"<p>Removes objects matching the given predicate block.</p>","parent_name":"NSMutableArray(MMMTemple)"},"Categories/NSArray%28MMMTemple%29.html#/c:objc(cs)NSArray(im)mmm_arrayOfSlicesWithMaxLength:":{"name":"-mmm_arrayOfSlicesWithMaxLength:","abstract":"<p>The original array cut into subarrays with each slice except perhaps the last one consisting of maxLength elements.</p>","parent_name":"NSArray(MMMTemple)"},"Categories/NSArray%28MMMTemple%29.html#/c:objc(cs)NSArray(im)mmm_forEachPair:":{"name":"-mmm_forEachPair:","abstract":"<p>Performs the given block for each pair of the elements of the array from left to right,</p>","parent_name":"NSArray(MMMTemple)"},"Categories/NSArray%28MMMTemple%29.html#/c:objc(cs)NSArray(im)mmm_forEach:":{"name":"-mmm_forEach:","abstract":"<p>Performs the given block for every element of the array.</p>","parent_name":"NSArray(MMMTemple)"},"Categories/NSArray%28MMMTemple%29.html#/c:objc(cs)NSArray(im)mmm_objectsMatching:":{"name":"-mmm_objectsMatching:","abstract":"<p>Returns objects matching the given predicate block.</p>","parent_name":"NSArray(MMMTemple)"},"Categories/NSArray%28MMMTemple%29.html#/c:objc(cs)NSArray(im)mmm_firstObjectMatching:":{"name":"-mmm_firstObjectMatching:","abstract":"<p>Returns the first object for which the given predicate block returns YES; nil otherwise.</p>","parent_name":"NSArray(MMMTemple)"},"Categories/NSDate%28MMMTemple%29.html#/c:objc(cs)NSDate(cm)mmm_dateWithInternetTimeString:":{"name":"+mmm_dateWithInternetTimeString:","abstract":"<p>NSDate from internet timestamps, ISO8601-like strings like &ldquo;2016-10-22T10:23:28Z&rdquo;.","parent_name":"NSDate(MMMTemple)"},"Categories/NSString%28MMMTemple%29.html#/c:objc(cs)NSString(im)mmm_stringBySubstitutingVariables:":{"name":"-mmm_stringBySubstitutingVariables:","abstract":"<p>Returns a string with variables in the form ${variable_name} being replaced with values from the provided dictionary","parent_name":"NSString(MMMTemple)"},"Categories/NSError%28MMMTemple%29.html#/c:objc(cs)NSError(im)mmm_description":{"name":"-mmm_description","abstract":"<p>Description including underlying errors in a bit more readable form.","parent_name":"NSError(MMMTemple)"},"Categories/NSError%28MMMTemple%29.html#/c:objc(cs)NSError(im)mmm_underlyingError":{"name":"-mmm_underlyingError","abstract":"<p>A shortcut fetching the underlying error.</p>","parent_name":"NSError(MMMTemple)"},"Categories/NSError%28MMMTemple%29.html#/c:objc(cs)NSError(cm)mmm_errorWithDomain:code:message:underlyingError:":{"name":"+mmm_errorWithDomain:code:message:underlyingError:","abstract":"<p>A convenience initializer accepting an underlying error as a parameter (can be nil).</p>","parent_name":"NSError(MMMTemple)"},"Categories/NSError%28MMMTemple%29.html#/c:objc(cs)NSError(cm)mmm_errorWithDomain:message:underlyingError:":{"name":"+mmm_errorWithDomain:message:underlyingError:","abstract":"<p>An initializer with the code being optional (set to -1, so is not displayed by mmm_description).</p>","parent_name":"NSError(MMMTemple)"},"Categories/NSError%28MMMTemple%29.html#/c:objc(cs)NSError(cm)mmm_errorWithDomain:message:":{"name":"+mmm_errorWithDomain:message:","abstract":"<p>Another initializer hiding both the code (setting it to -1) and the underlyingError.</p>","parent_name":"NSError(MMMTemple)"},"Categories/NSObject%28MMMTemple%29.html#/c:objc(cs)NSObject(im)mmm_stripNSNull":{"name":"-mmm_stripNSNull","abstract":"<p>The receiver itself, or nil, if the receiver is [NSNull null].</p>","parent_name":"NSObject(MMMTemple)"},"Categories/NSMutableCharacterSet%28MMMTemple%29.html#/c:objc(cs)NSMutableCharacterSet(im)mmm_addCharactersFrom:to:":{"name":"-mmm_addCharactersFrom:to:","abstract":"<p>Convenience shortcut for <code>addCharactersInRange</code>. Adds a range of characters from first to last (including them both).</p>","parent_name":"NSMutableCharacterSet(MMMTemple)"},"Categories/NSScanner%28MMMTemple%29.html#/c:objc(cs)NSScanner(im)mmm_scanNextCharacter":{"name":"-mmm_scanNextCharacter","abstract":"<p>Grabs and returns the next character or 0 in case it&rsquo;s the scanner is at end.</p>","parent_name":"NSScanner(MMMTemple)"},"Categories/NSDictionary%28MMMTemple%29.html#/c:objc(cs)NSDictionary(im)mmm_extendedWithDictionary:":{"name":"-mmm_extendedWithDictionary:","abstract":"<p>A dictionary built from the receiver by adding values from another dictionary.","parent_name":"NSDictionary(MMMTemple)"},"Categories/NSDictionary%28MMMTemple%29.html":{"name":"NSDictionary(MMMTemple)","abstract":"<p>@}</p>"},"Categories/NSScanner%28MMMTemple%29.html":{"name":"NSScanner(MMMTemple)","abstract":"<p>Undocumented</p>"},"Categories/NSMutableCharacterSet%28MMMTemple%29.html":{"name":"NSMutableCharacterSet(MMMTemple)","abstract":"<p>Undocumented</p>"},"Categories/NSObject%28MMMTemple%29.html":{"name":"NSObject(MMMTemple)","abstract":"<p>Undocumented</p>"},"Categories/NSError%28MMMTemple%29.html":{"name":"NSError(MMMTemple)","abstract":"<p>Undocumented</p>"},"Categories/NSString%28MMMTemple%29.html":{"name":"NSString(MMMTemple)","abstract":"<p>Undocumented</p>"},"Categories/NSDate%28MMMTemple%29.html":{"name":"NSDate(MMMTemple)","abstract":"<p>Undocumented</p>"},"Categories/NSArray%28MMMTemple%29.html":{"name":"NSArray(MMMTemple)","abstract":"<p>Undocumented</p>"},"Categories/NSMutableArray%28MMMTemple%29.html":{"name":"NSMutableArray(MMMTemple)","abstract":"<p>Undocumented</p>"},"Categories/NSData%28MMMTemple%29.html":{"name":"NSData(MMMTemple)","abstract":"<p>Undocumented</p>"},"Categories.html":{"name":"Categories","abstract":"<p>The following categories are available globally.</p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"},"Type%20Definitions.html":{"name":"Type Definitions","abstract":"<p>The following type definitions are available globally.</p>"},"Functions.html":{"name":"Functions","abstract":"<p>The following functions are available globally.</p>"},"Enums.html":{"name":"Enumerations","abstract":"<p>The following enumerations are available globally.</p>"},"Extensions.html":{"name":"Extensions","abstract":"<p>The following extensions are available globally.</p>"},"Structs.html":{"name":"Structures","abstract":"<p>The following structures are available globally.</p>"}}